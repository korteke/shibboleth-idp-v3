<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is an EXAMPLE configuration file. This file specifies relying 
	party dependent configurations for the IdP, for example, whether SAML assertions 
	to a particular relying party should be signed. It also includes metadata 
	provider and credential definitions used when answering requests to a relying 
	party. -->
<rp:RelyingPartyGroup xmlns:rp="urn:mace:shibboleth:2.0:relying-party"
	xmlns:saml="urn:mace:shibboleth:2.0:relying-party:saml" xmlns:metadata="urn:mace:shibboleth:2.0:metadata"
	xmlns:resource="urn:mace:shibboleth:2.0:resource" xmlns:security="urn:mace:shibboleth:2.0:security"
	xmlns:samlsec="urn:mace:shibboleth:2.0:security:saml" xmlns:samlmd="urn:oasis:names:tc:SAML:2.0:metadata"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="urn:mace:shibboleth:2.0:relying-party http://shibboleth.net/schema/idp/shibboleth-relying-party.xsd
                        urn:mace:shibboleth:2.0:relying-party:saml http://shibboleth.net/schema/idp/shibboleth-relying-party-saml.xsd
                        urn:mace:shibboleth:2.0:metadata http://shibboleth.net/schema/idp/shibboleth-metadata.xsd
                        urn:mace:shibboleth:2.0:resource http://shibboleth.net/schema/idp/shibboleth-resource.xsd 
                        urn:mace:shibboleth:2.0:security http://shibboleth.net/schema/idp/shibboleth-security.xsd
                        urn:mace:shibboleth:2.0:security:saml http://shibboleth.net/schema/idp/shibboleth-security-policy-saml.xsd
                        urn:oasis:names:tc:SAML:2.0:metadata http://docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd">

	<!-- ========================================== -->
	<!-- Relying Party Configurations -->
	<!-- ========================================== -->
	<rp:AnonymousRelyingParty provider="${IDP_ENTITY_ID}"
		defaultSigningCredentialRef="IdPCredential" />

	<rp:DefaultRelyingParty provider="${IDP_ENTITY_ID}"
		defaultSigningCredentialRef="IdPCredential">
		<!-- Each attribute in these profiles configuration is set to its default 
			value, that is, the values that would be in effect if those attributes were 
			not present. We list them here so that people are aware of them (since they 
			seem reluctant to read the documentation). -->
		<rp:ProfileConfiguration xsi:type="saml:ShibbolethSSOProfile"
			includeAttributeStatement="false" assertionLifetime="PT5M"
			signResponses="conditional" signAssertions="never"
			includeConditionsNotBefore="true" />

		<rp:ProfileConfiguration xsi:type="saml:SAML1AttributeQueryProfile"
			assertionLifetime="PT5M" signResponses="conditional" signAssertions="never"
			includeConditionsNotBefore="true" />

		<rp:ProfileConfiguration xsi:type="saml:SAML1ArtifactResolutionProfile"
			signResponses="conditional" signAssertions="never" />

		<rp:ProfileConfiguration xsi:type="saml:SAML2SSOProfile"
			includeAttributeStatement="true" assertionLifetime="PT5M"
			assertionProxyCount="0" signResponses="never" signAssertions="always"
			encryptAssertions="conditional" encryptNameIds="never"
			includeConditionsNotBefore="true" />

		<rp:ProfileConfiguration xsi:type="saml:SAML2ECPProfile"
			includeAttributeStatement="true" assertionLifetime="PT5M"
			assertionProxyCount="0" signResponses="never" signAssertions="always"
			encryptAssertions="conditional" encryptNameIds="never"
			includeConditionsNotBefore="true" />

		<rp:ProfileConfiguration xsi:type="saml:SAML2AttributeQueryProfile"
			assertionLifetime="PT5M" assertionProxyCount="0" signResponses="conditional"
			signAssertions="never" encryptAssertions="conditional"
			encryptNameIds="never" includeConditionsNotBefore="true" />

		<rp:ProfileConfiguration xsi:type="saml:SAML2ArtifactResolutionProfile"
			signResponses="never" signAssertions="always" encryptAssertions="conditional"
			encryptNameIds="never" />

		<rp:ProfileConfiguration xsi:type="saml:SAML2LogoutRequestProfile"
			signResponses="conditional" />

	</rp:DefaultRelyingParty>


	<!-- ========================================== -->
	<!-- Metadata Configuration -->
	<!-- ========================================== -->
	<!-- MetadataProvider the combining other MetadataProviders -->
	<metadata:MetadataProvider id="ShibbolethMetadata"
		xsi:type="metadata:ChainingMetadataProvider">


		<!-- Example metadata provider. -->
		<!-- Reads metadata from a URL and store a backup copy on the file system. -->
		<!-- Validates the signature of the metadata and filters out all by SP 
			entities in order to save memory -->
		<metadata:MetadataProvider id="URLMD"
			xsi:type="metadata:FilesystemMetadataProvider" metadataFile="${DIR}/test-metadata-out.xml">
			<metadata:MetadataFilter xsi:type="metadata:ChainingFilter">
				<metadata:MetadataFilter xsi:type="metadata:SignatureValidation"
					requireSignedRoot="true">
					<metadata:PublicKey>
						MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxg0TyQAP/tIvOH89EtaX
						uRRn8SYzTj7W1TbNY4VvBmobjkRmSkki4hH9x4sQpi635wn6WtXTN/FNNmkTK3N/
						LspmBWxfZS+n+cc7I82E5yvCAPX67QsZgqgglp2W5dvK/FsMMCS6X6SVqzBLMP88
						NenXKxY+HMxMs0sT0UKYh1cAEqadrHRBO65aDBcm5a0sBVYt9K6pgaOHrp/zSIbh
						nR5tFFLjBbtFktDpHL3AdGBH3OYidNGKBO3tJ3Ms7LeKXsM0+0Y4P+9fHZINL2X3
						E2N6GVnKs5PZTg9sP0FtIpAbYm/+zCx7Yj1ET/Er8mDd6tNVGSQsn9s5xUBwGqn1
						4wIDAQAB</metadata:PublicKey>
				</metadata:MetadataFilter>
				<metadata:MetadataFilter xsi:type="metadata:EntityRoleWhiteList">
					<metadata:RetainedRole>samlmd:SPSSODescriptor</metadata:RetainedRole>
				</metadata:MetadataFilter>
			</metadata:MetadataFilter>
		</metadata:MetadataProvider>

	</metadata:MetadataProvider>


	<!-- ========================================== -->
	<!-- Security Configurations -->
	<!-- ========================================== -->
	<security:Credential id="IdPCredential" xsi:type="security:X509Filesystem">
		<security:PrivateKey>${DIR}/security/credential/key.pem
		</security:PrivateKey>
		<security:Certificate>${DIR}/security/credential/cert.pem
		</security:Certificate>
	</security:Credential>


	<!-- DO NOT EDIT BELOW THIS POINT -->
	<!-- The following trust engines and rules control every aspect of security 
		related to incoming messages. Trust engines evaluate various tokens (like 
		digital signatures) for trust worthiness while the security policies establish 
		a set of checks that an incoming message must pass in order to be considered 
		secure. Naturally some of these checks require the validation of the tokens 
		evaluated by the trust engines and so you'll see some rules that reference 
		the declared trust engines. -->
		
	<security:TrustEngine id="shibboleth.SignatureTrustEngine"
		xsi:type="security:SignatureChaining">
		<security:TrustEngine
			id="shibboleth.SignatureMetadataExplicitKeyTrustEngine" xsi:type="security:MetadataExplicitKeySignature"
			metadataProviderRef="ShibbolethMetadata" />
		<security:TrustEngine id="shibboleth.SignatureMetadataPKIXTrustEngine"
			xsi:type="security:MetadataPKIXSignature" metadataProviderRef="ShibbolethMetadata" />
	</security:TrustEngine>
	
	<security:TrustEngine id="shibboleth.CredentialTrustEngine"
		xsi:type="security:Chaining">
		<security:TrustEngine
			id="shibboleth.CredentialMetadataExplictKeyTrustEngine" xsi:type="security:MetadataExplicitKey"
			metadataProviderRef="ShibbolethMetadata" />
		<security:TrustEngine id="shibboleth.CredentialMetadataPKIXTrustEngine"
			xsi:type="security:MetadataPKIXX509Credential" metadataProviderRef="ShibbolethMetadata" />
	</security:TrustEngine>

	<security:SecurityPolicy id="shibboleth.ShibbolethSSOSecurityPolicy"
		xsi:type="security:SecurityPolicyType">
		<security:Rule xsi:type="samlsec:Replay" required="false" />
		<security:Rule xsi:type="samlsec:IssueInstant" required="false" />
		<security:Rule xsi:type="samlsec:MandatoryIssuer" />
	</security:SecurityPolicy>

	<security:SecurityPolicy id="shibboleth.SAML1AttributeQuerySecurityPolicy"
		xsi:type="security:SecurityPolicyType">
		<security:Rule xsi:type="samlsec:Replay" />
		<security:Rule xsi:type="samlsec:IssueInstant" />
		<security:Rule xsi:type="samlsec:ProtocolWithXMLSignature"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="security:ClientCertAuth"
			trustEngineRef="shibboleth.CredentialTrustEngine" />
		<security:Rule xsi:type="samlsec:MandatoryIssuer" />
		<security:Rule xsi:type="security:MandatoryMessageAuthentication" />
	</security:SecurityPolicy>

	<security:SecurityPolicy
		id="shibboleth.SAML1ArtifactResolutionSecurityPolicy" xsi:type="security:SecurityPolicyType">
		<security:Rule xsi:type="samlsec:Replay" />
		<security:Rule xsi:type="samlsec:IssueInstant" />
		<security:Rule xsi:type="samlsec:ProtocolWithXMLSignature"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="security:ClientCertAuth"
			trustEngineRef="shibboleth.CredentialTrustEngine" />
		<security:Rule xsi:type="samlsec:MandatoryIssuer" />
		<security:Rule xsi:type="security:MandatoryMessageAuthentication" />
	</security:SecurityPolicy>

	<security:SecurityPolicy id="shibboleth.SAML2SSOSecurityPolicy"
		xsi:type="security:SecurityPolicyType">
		<security:Rule xsi:type="samlsec:Replay" />
		<security:Rule xsi:type="samlsec:IssueInstant" />
		<security:Rule xsi:type="samlsec:SAML2AuthnRequestsSigned" />
		<security:Rule xsi:type="samlsec:ProtocolWithXMLSignature"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="samlsec:SAML2HTTPRedirectSimpleSign"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="samlsec:SAML2HTTPPostSimpleSign"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="samlsec:MandatoryIssuer" />
	</security:SecurityPolicy>

	<security:SecurityPolicy id="shibboleth.SAML2AttributeQuerySecurityPolicy"
		xsi:type="security:SecurityPolicyType">
		<security:Rule xsi:type="samlsec:Replay" />
		<security:Rule xsi:type="samlsec:IssueInstant" />
		<security:Rule xsi:type="samlsec:ProtocolWithXMLSignature"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="samlsec:SAML2HTTPRedirectSimpleSign"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="samlsec:SAML2HTTPPostSimpleSign"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="security:ClientCertAuth"
			trustEngineRef="shibboleth.CredentialTrustEngine" />
		<security:Rule xsi:type="samlsec:MandatoryIssuer" />
		<security:Rule xsi:type="security:MandatoryMessageAuthentication" />
	</security:SecurityPolicy>

	<security:SecurityPolicy
		id="shibboleth.SAML2ArtifactResolutionSecurityPolicy" xsi:type="security:SecurityPolicyType">
		<security:Rule xsi:type="samlsec:Replay" />
		<security:Rule xsi:type="samlsec:IssueInstant" />
		<security:Rule xsi:type="samlsec:ProtocolWithXMLSignature"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="samlsec:SAML2HTTPRedirectSimpleSign"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="samlsec:SAML2HTTPPostSimpleSign"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="security:ClientCertAuth"
			trustEngineRef="shibboleth.CredentialTrustEngine" />
		<security:Rule xsi:type="samlsec:MandatoryIssuer" />
		<security:Rule xsi:type="security:MandatoryMessageAuthentication" />
	</security:SecurityPolicy>

	<security:SecurityPolicy id="shibboleth.SAML2SLOSecurityPolicy"
		xsi:type="security:SecurityPolicyType">
		<security:Rule xsi:type="samlsec:Replay" />
		<security:Rule xsi:type="samlsec:IssueInstant" />
		<security:Rule xsi:type="samlsec:ProtocolWithXMLSignature"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="samlsec:SAML2HTTPRedirectSimpleSign"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="samlsec:SAML2HTTPPostSimpleSign"
			trustEngineRef="shibboleth.SignatureTrustEngine" />
		<security:Rule xsi:type="security:ClientCertAuth"
			trustEngineRef="shibboleth.CredentialTrustEngine" />
		<security:Rule xsi:type="samlsec:MandatoryIssuer" />
		<security:Rule xsi:type="security:MandatoryMessageAuthentication" />
	</security:SecurityPolicy>

</rp:RelyingPartyGroup>
